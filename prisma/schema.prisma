// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id              String   @id @default(cuid())
  name            String
  slug            String   @unique
  description     String
  price           Decimal
  originalPrice   Decimal?
  images          String[]
  category        String
  supplier        String
  supplierInfo    Json
  deliveryTime    String
  inStock         Boolean  @default(true)
  rating          Float    @default(0)
  reviewCount     Int      @default(0)
  features        String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  cartItems       CartItem[]
  orderItems      OrderItem[]
  reviews         Review[]
}

model User {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String
  password    String
  addresses   Json[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  orders      Order[]
  cartItems   CartItem[]
  reviews     Review[]
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  status          OrderStatus @default(PENDING)
  total           Decimal
  shippingAddress Json
  paymentMethod   String
  paymentStatus   PaymentStatus @default(PENDING)
  trackingNumber  String?
  supplierOrders  Json[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  user            User        @relation(fields: [userId], references: [id])
  items           OrderItem[]
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String
  productId   String
  quantity    Int
  price       Decimal
  supplierInfo Json
  
  // Relations
  order       Order   @relation(fields: [orderId], references: [id])
  product     Product @relation(fields: [productId], references: [id])
}

model CartItem {
  id        String @id @default(cuid())
  userId    String
  productId String
  quantity  Int
  
  // Relations
  user      User    @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

enum OrderStatus {
  PENDING
  AWAITING_PURCHASE
  PURCHASED
  SHIPPED_TO_MALI
  IN_MALI
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
